
examples/simple_expressions/assignment.cpsl
           
VAR
	number : integer;
BEGIN
	number := 42;
	write("The answer is ",number,"\n")
END.

examples/simple_expressions/badidea.cpsl
                             
CONST
	true = 0;
	false = 1;
TYPE
	i = integer;
	c = char;
	integer = char;
	char = integer;
VAR
	i : i;
	c : integer;
BEGIN
	write(false, 0, '\n');
	write(true, 1, '\n');
	i := 65;
	c := chr(i);
	write(i, ' ', c, '\n');
	write("Expected:\n");
	write("10\n");
	write("01\n");
	write("65 A\n")
END.

examples/simple_expressions/const_declarations.cpsl
            
CONST
	int = 5;
	char = 'a';
	bool = true;
	str = "Hello world";
BEGIN
	write("5=", int, '\n');
	write("a=", char, '\n');
	write("true=", bool, '\n');
	write("str=", str, '\n')
END.

examples/simple_expressions/expressions.cpsl
                                           
VAR
	a, b : integer;
BEGIN
	write("2+2=", 4, '\n');
	write("2*2=", 4, '\n');
	write("2/2=", 1, '\n');
	write("2-2=", 0, '\n');
	write("Enter A:");
	read(a);
	write("\nEnter b:");
	read(b);
	write('\n');
	write("a+b=", (a + b), '\n');
	write("a-b=", (a - b), '\n');
	write("a*b=", (a * b), '\n');
	write("a/b=", (a / b), '\n');
	write("a%b=", (a % b), '\n');
	write("a=b=", a + b, '\n');
	write("a<b=", a < b, '\n');
	write("a>b=", a > b, '\n');
	write("a<>b=", a <> b, '\n');
	write("a<=b=", a <= b, '\n');
	write("a>=b=", a >= b, '\n')
END.

examples/simple_expressions/hello.cpsl

BEGIN
	write("Hello World!")
END.

examples/simple_expressions/io.cpsl
  
VAR
	i : integer;
	c : char;
BEGIN
	write("Enter an integer, then a character:\n");
	read(i, c);
	write("integer:   ", i, '\n');
	write("character: ", c, '\n');
	write("true: ", true, '\n');
	write("false: ", false, '\n')
END.

examples/simple_expressions/long_expression.cpsl
                                                      
VAR
	a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p : integer;
	x, y, z : integer;
BEGIN
	a := 3;
	b := 2;
	c := 1;
	d := 4;
	e := 5;
	f := 6;
	g := 7;
	h := 8;
	i := 9;
	j := 10;
	k := 11;
	l := 12;
	m := 13;
	n := 14;
	o := 15;
	p := 16;
	x := ((((a + b) * (c + d)) - ((e + f) * (g + h))) / (((i + j) * (k + l)) - ((m + n) * (o + p))));
	y := (a + (b + (c + (d + (e + (f + (g + (h + (i + (j + (k + (l + (m + (n + (o + p)))))))))))))));
	z := (((((((((((((((((a / b) + ((a * a) / (b * b))) + (((a * a) * a) / ((b * b) * b))) + ((((a * a) * a) * a) / (((b * b) * b) * b))) + (((((a * a) * a) * a) * a) / ((((b * b) * b) * b) * b))) + ((((((a * a) * a) * a) * a) * a) / (((((b * b) * b) * b) * b) * b))) + (((((((a * a) * a) * a) * a) * a) * a) / ((((((b * b) * b) * b) * b) * b) * b))) + ((((((((a * a) * a) * a) * a) * a) * a) * a) / (((((((b * b) * b) * b) * b) * b) * b) * b))) + (((((((((a * a) * a) * a) * a) * a) * a) * a) * a) / ((((((((b * b) * b) * b) * b) * b) * b) * b) * b))) + ((((((((((a * a) * a) * a) * a) * a) * a) * a) * a) * a) / (((((((((b * b) * b) * b) * b) * b) * b) * b) * b) * b))) + (((((((((((a * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) / ((((((((((b * b) * b) * b) * b) * b) * b) * b) * b) * b) * b))) + ((((((((((((a * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) / (((((((((((b * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b))) + (((((((((((((a * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) / ((((((((((((b * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b))) + ((((((((((((((a * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) / (((((((((((((b * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b))) + (((((((((((((((a * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) / ((((((((((((((b * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b))) + ((((((((((((((((a * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) / (((((((((((((((b * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b))) + (((((((((((((((((a * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) * a) / ((((((((((((((((b * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b) * b)));
	write("x = ",x,"    should be 0", '\n');
	write("y = ",y,"  should be 136\n");
	write("z = ",z," should be 2944\n")
END.

examples/simple_expressions/stop.cpsl
                 
VAR
	number : integer;
BEGIN
	number := 42;
	write("42 should write once, not twice\n");
	write(number);
	stop;
	write(number)
END.

